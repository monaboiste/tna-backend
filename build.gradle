plugins {
    id 'org.springframework.boot' version '2.4.5'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'co.uzzu.dotenv.gradle' version '1.1.0'
    id 'idea'
    id 'java'
}

group = 'pl.zgora.uz.wiea'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
    mavenCentral()
}

tasks.withType(Test) {
    useJUnitPlatform()
}

sourceSets {
    main {
        java.srcDirs('./src/main/java')
        resources.srcDirs('./src/main/resources')
    }
    test {
        java.srcDirs('./src/test/java')
        resources.srcDirs('./src/test/resources')
    }
    integrationTest {
        java.srcDirs('./src/integrationTest/java')
        resources.srcDirs('./src/integrationTest/resources')
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

idea {
    module {
        testSourceDirs += project.sourceSets.integrationTest.java.srcDirs
        testSourceDirs += project.sourceSets.integrationTest.resources.srcDirs
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

tasks.processResources.doFirst {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

tasks.processIntegrationTestResources.doFirst {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

task integrationTest(type: Test) {
    group = 'verification'
    description = 'Runs the integration tests.'

    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    include '**/*IntegrationTest.class'
    mustRunAfter test
}

tasks.withType(Test).configureEach {
    testLogging { events "passed", "skipped", "failed" }
    outputs.upToDateWhen { false }
}

check.dependsOn integrationTest

bootRun {
    systemProperties = System.properties as Map<String, ?>
    // combined with co.uzzu.dotenv.gradle plugin allows to use .env file
    try {
        environment = [
                'TNA_ADMIN_LOGIN': env.TNA_ADMIN_LOGIN.value,
                'TNA_ADMIN_PASSWORD': env.TNA_ADMIN_PASSWORD.value,
                'POSTGRES_HOST': env.POSTGRES_HOST.value,
                'POSTGRES_PORT': env.POSTGRES_PORT.value,
                'POSTGRES_DB': env.POSTGRES_DB.value,
                'POSTGRES_USER': env.POSTGRES_USER.value,
                'POSTGRES_PASSWORD': env.POSTGRES_PASSWORD.value
        ]
    } catch(ignored) {
        logger.info('''
            [build.gradle] .env file was not detected or some of following 
            variables was not set, using system environment variables
            ''')
    }
}

dependencies {
    implementation(
            'org.springframework.boot:spring-boot-starter-data-jpa',
            'org.springframework.boot:spring-boot-starter-web',
            'org.springframework.boot:spring-boot-starter-validation',
            'org.springframework.boot:spring-boot-starter-security',

            'org.liquibase:liquibase-core',

            'me.alidg:errors-spring-boot-starter:1.4.0'
    )
    compileOnly (
            'org.projectlombok:lombok'
    )
    annotationProcessor(
            'org.projectlombok:lombok',
            'org.springframework.boot:spring-boot-configuration-processor'
    )
    runtimeOnly(
            'org.postgresql:postgresql'
    )
    testImplementation(
            'org.springframework.boot:spring-boot-starter-test',
            'org.springframework.security:spring-security-test'
    )
    testRuntimeOnly(
            // test database TODO: to be replaced with postgresql
            'com.h2database:h2'
    )
}
